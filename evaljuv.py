import streamlit as st
from docx import Document
import requests

# Configuraci√≥n b√°sica
st.set_page_config(page_title="An√°lisis de Novelas", layout="wide")
st.title("An√°lisis Cr√≠tico de tu Novela")

def read_docx(file):
    doc = Document(file)
    return "\n".join([paragraph.text for paragraph in doc.paragraphs])

def analyze_novel(text):
    try:
        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {st.secrets['OPENROUTER_API_KEY']}",
            "Content-Type": "application/json"
        }
        
        analysis_prompt = """Realiza un an√°lisis cr√≠tico detallado de esta novela, evaluando:

        1. ESTRUCTURA Y RITMO
        - Coherencia de la estructura narrativa
        - Ritmo y pacing de la historia
        - Balance entre descripci√≥n, narraci√≥n y di√°logo
        
        2. PERSONAJES
        - Profundidad y desarrollo
        - Coherencia en sus acciones y motivaciones
        - Arcos de desarrollo
        
        3. TRAMA
        - Consistencia y l√≥gica interna
        - Resoluci√≥n de conflictos
        - Manejo de subtramas
        
        4. ESTILO Y T√âCNICA
        - Calidad de la prosa
        - Uso del lenguaje
        - T√©cnicas narrativas empleadas
        
        5. PUNTOS A MEJORAR
        - Identificar √°reas espec√≠ficas que necesitan revisi√≥n
        - Sugerir mejoras concretas
        - Se√±alar posibles inconsistencias
        
        Proporciona ejemplos espec√≠ficos del texto para ilustrar cada punto."""
        
        data = {
            "model": "openai/gpt-4o-mini",
            "messages": [{"role": "user", "content": f"{analysis_prompt}\n\nNOVELA:\n\n{text}"}],
            "max_tokens": 4000
        }
        
        response = requests.post(url, headers=headers, json=data, timeout=120)
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]
    
    except requests.exceptions.Timeout:
        st.error("‚è±Ô∏è La solicitud excedi√≥ el tiempo l√≠mite. Intenta con una secci√≥n m√°s corta del texto.")
    except requests.exceptions.HTTPError as http_err:
        st.error(f"‚ùå Error en la API: {http_err}")
    except Exception as e:
        st.error(f"‚ùå Error inesperado: {str(e)}")
    return None

# Funci√≥n para calificar cada aspecto
def rate_aspects():
    structure_rating = st.slider("Calificaci√≥n para Estructura y Ritmo:", min_value=1, max_value=10, value=5)
    characters_rating = st.slider("Calificaci√≥n para Personajes:", min_value=1, max_value=10, value=5)
    plot_rating = st.slider("Calificaci√≥n para Trama:", min_value=1, max_value=10, value=5)
    style_rating = st.slider("Calificaci√≥n para Estilo y T√©cnica:", min_value=1, max_value=10, value=5)
    
    # Calcular el promedio
    average_rating = (structure_rating + characters_rating + plot_rating + style_rating) / 4
    return structure_rating, characters_rating, plot_rating, style_rating, average_rating

# Interfaz principal
st.write("""
### üìö Instrucciones
1. Sube tu novela en formato .docx
2. Haz clic en 'Analizar' para recibir un an√°lisis cr√≠tico detallado
3. El an√°lisis evaluar√° estructura, personajes, trama y estilo
""")

uploaded_file = st.file_uploader("Sube tu novela (formato .docx)", type="docx")

if uploaded_file:
    try:
        # Leer el archivo
        novel_text = read_docx(uploaded_file)
        st.success("‚úÖ Archivo cargado correctamente")
        
        # Mostrar vista previa
        with st.expander("üìÑ Ver contenido del archivo"):
            st.text_area(
                "Primeras 1000 palabras del texto:",
                novel_text[:1000] + "...",
                height=200
            )
        
        # Bot√≥n de an√°lisis
        if st.button("üîç Analizar Novela"):
            with st.spinner("Analizando el texto... (esto puede tomar unos minutos)"):
                analysis = analyze_novel(novel_text)
                
                if analysis:
                    st.write("## üìù An√°lisis Cr√≠tico")
                    
                    # Crear tabs para organizar el an√°lisis
                    tab1, tab2 = st.tabs(["üìä An√°lisis Completo", "üìã Resumen"])
                    
                    with tab1:
                        st.markdown(analysis)
                    
                    with tab2:
                        st.write("""
                        ### Principales aspectos analizados:
                        - ‚ö° Estructura y ritmo narrativo
                        - üë• Desarrollo de personajes
                        - üìà Coherencia de la trama
                        - ‚úçÔ∏è Estilo y t√©cnica literaria
                        - üéØ Puntos espec√≠ficos a mejorar
                        """)
                    
                    # Calificar cada aspecto
                    st.write("### Califica cada aspecto de la novela")
                    structure_rating, characters_rating, plot_rating, style_rating, average_rating = rate_aspects()
                    
                    # Mostrar resultados
                    st.write("### Resultados de Calificaci√≥n:")
                    st.write(f"‚≠ê **Calificaci√≥n para Estructura y Ritmo:** {structure_rating}")
                    st.write(f"‚≠ê **Calificaci√≥n para Personajes:** {characters_rating}")
                    st.write(f"‚≠ê **Calificaci√≥n para Trama:** {plot_rating}")
                    st.write(f"‚≠ê **Calificaci√≥n para Estilo y T√©cnica:** {style_rating}")
                    st.write(f"‚≠ê **Calificaci√≥n global asignada:** {average_rating:.2f}")

    except Exception as e:
        st.error(f"Error al procesar el archivo: {str(e)}")
