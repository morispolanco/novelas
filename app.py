import streamlit as st
import requests
import re

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Asistente para Escribir Novelas", layout="wide")

# T√≠tulo de la aplicaci√≥n
st.title("üìö Asistente para Escribir tu Novela Cap√≠tulo por Cap√≠tulo")

# Funci√≥n para llamar a la API de Together con el modelo Mixtral-8x7B-Instruct-v0.1
def call_together_api(prompt):
    api_url = "https://api.together.xyz/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {st.secrets['TOGETHER_API_KEY']}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
        "messages": [
            {"role": "system", "content": "Eres un escritor creativo que ayuda a desarrollar novelas."},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 3000,  # Ajusta este valor seg√∫n las limitaciones de la API
        "temperature": 0.7,
        "top_p": 0.7,
        "top_k": 50,
        "repetition_penalty": 1.2,
        "stop": ["<|eot_id|>"],
        "stream": False
    }

    try:
        response = requests.post(api_url, headers=headers, json=payload)
        response.raise_for_status()
        data = response.json()
        # Verificar si la respuesta contiene errores
        if 'error' in data:
            st.error(f"Error en la API: {data['error']['message']}")
            return None
        # Asumiendo que la respuesta contiene 'choices' con 'message' y 'content'
        return data['choices'][0]['message']['content'].strip()
    except requests.exceptions.RequestException as e:
        st.error(f"Error en la llamada a la API: {e}")
        return None
    except (KeyError, IndexError, TypeError) as e:
        st.error(f"Formato inesperado de la respuesta de la API: {e}")
        return None

# Inicializaci√≥n del estado de la sesi√≥n
if 'elements' not in st.session_state:
    st.session_state.elements = {}
if 'chapters' not in st.session_state:
    st.session_state.chapters = []
if 'genre' not in st.session_state:
    st.session_state.genre = None
if 'synopsis' not in st.session_state:
    st.session_state.synopsis = ""
if 'audience' not in st.session_state:
    st.session_state.audience = ""

# Funci√≥n para generar los elementos fundamentales
def generar_elementos():
    if not st.session_state.genre:
        st.error("Por favor, selecciona un g√©nero antes de generar los elementos.")
        return
    if not st.session_state.synopsis:
        st.error("Por favor, ingresa una sinopsis antes de generar los elementos.")
        return
    if not st.session_state.audience:
        st.error("Por favor, define la audiencia antes de generar los elementos.")
        return
    prompt = (
        f"Necesito que me ayudes a crear una novela del g√©nero **{st.session_state.genre}** basada en la siguiente sinopsis:\n\n"
        f"**Sinopsis:** {st.session_state.synopsis}\n\n"
        f"**Audiencia:** {st.session_state.audience}\n\n"
        "Por favor, genera los siguientes elementos de manera detallada y coherente:\n"
        "1. **Personajes principales:** Describe al menos tres personajes principales con sus caracter√≠sticas, incluyendo personalidad, apariencia y motivaciones.\n"
        "2. **Trama:** Esboza la trama principal de la novela, incluyendo el conflicto central y los puntos de giro principales.\n"
        "3. **Ambientaci√≥n:** Describe el mundo o entorno donde se desarrolla la historia, incluyendo detalles geogr√°ficos, culturales y temporales.\n"
        "4. **T√©cnica narrativa:** Indica el punto de vista (primera persona, tercera persona, etc.) y el estilo narrativo que se utilizar√° (descriptivo, din√°mico, etc.).\n"
    )
    with st.spinner("Generando elementos de la novela..."):
        resultado = call_together_api(prompt)
    if resultado:
        # Parsear el resultado asumiendo que est√° en formato Markdown
        try:
            elementos = {}
            # Utilizamos expresiones regulares para extraer las secciones
            personajes_match = re.search(r"\*\*Personajes principales:\*\*\s*(.*?)(?=\n\*\*Trama:|\Z)", resultado, re.DOTALL)
            trama_match = re.search(r"\*\*Trama:\*\*\s*(.*?)(?=\n\*\*Ambientaci√≥n:|\Z)", resultado, re.DOTALL)
            ambientacion_match = re.search(r"\*\*Ambientaci√≥n:\*\*\s*(.*?)(?=\n\*\*T√©cnica narrativa:|\Z)", resultado, re.DOTALL)
            tecnica_match = re.search(r"\*\*T√©cnica narrativa:\*\*\s*(.*)", resultado, re.DOTALL)

            if personajes_match:
                elementos['personajes'] = personajes_match.group(1).strip()
            if trama_match:
                elementos['trama'] = trama_match.group(1).strip()
            if ambientacion_match:
                elementos['ambientacion'] = ambientacion_match.group(1).strip()
            if tecnica_match:
                elementos['tecnica_narrativa'] = tecnica_match.group(1).strip()

            if elementos:
                st.session_state.elements = elementos
                st.success("Elementos generados exitosamente.")
            else:
                st.error("No se pudieron extraer los elementos de la respuesta de la API.")
        except Exception as e:
            st.error(f"Error al procesar los elementos: {e}")

# Funci√≥n para generar un cap√≠tulo
def generar_capitulo(idea=None):
    if not st.session_state.chapters:
        # Generar el primer cap√≠tulo basado en los elementos
        if not st.session_state.elements:
            st.error("Primero debes generar los elementos de la novela.")
            return
        prompt = (
            f"Usa los siguientes elementos para escribir el primer cap√≠tulo de una novela del g√©nero **{st.session_state.genre}** basada en la sinopsis proporcionada y dirigida a la audiencia definida. "
            "El cap√≠tulo debe ser tres veces m√°s largo de lo habitual, incluir di√°logos entre los personajes utilizando la raya (‚Äî) y mantener un estilo narrativo coherente y atractivo.\n\n"
            f"**Sinopsis:** {st.session_state.synopsis}\n"
            f"**Audiencia:** {st.session_state.audience}\n"
            f"**Personajes principales:** {st.session_state.elements.get('personajes', '')}\n"
            f"**Trama:** {st.session_state.elements.get('trama', '')}\n"
            f"**Ambientaci√≥n:** {st.session_state.elements.get('ambientacion', '')}\n"
            f"**T√©cnica narrativa:** {st.session_state.elements.get('tecnica_narrativa', '')}\n\n"
            "Aseg√∫rate de que los di√°logos est√©n correctamente formateados utilizando la raya (‚Äî) y que cada di√°logo sea claro y relevante para el desarrollo de la trama."
        )
    else:
        # Generar cap√≠tulos subsecuentes basados en el anterior y la idea del usuario
        if not idea:
            st.error("Por favor, proporciona una idea para el siguiente cap√≠tulo.")
            return
        ultimo_capitulo = st.session_state.chapters[-1]
        prompt = (
            f"Bas√°ndote en el siguiente cap√≠tulo y la idea proporcionada, escribe el siguiente cap√≠tulo de la novela del g√©nero **{st.session_state.genre}**. "
            "El cap√≠tulo debe ser tres veces m√°s largo de lo habitual, incluir di√°logos entre los personajes utilizando la raya (‚Äî) y mantener un estilo narrativo coherente y atractivo.\n\n"
            f"**√öltimo Cap√≠tulo:**\n{ultimo_capitulo}\n\n"
            f"**Idea para el siguiente cap√≠tulo:** {idea}\n\n"
            "Aseg√∫rate de que los di√°logos est√©n correctamente formateados utilizando la raya (‚Äî) y que cada di√°logo sea claro y relevante para el desarrollo de la trama."
        )
    with st.spinner("Generando cap√≠tulo..."):
        resultado = call_together_api(prompt)
    if resultado:
        st.session_state.chapters.append(resultado)
        st.success("Cap√≠tulo generado exitosamente.")


# Funci√≥n para editar los elementos de la novela
def editar_elementos():
    st.subheader("üìë Editar Elementos de la Novela")
    
    with st.expander("Editar G√©nero"):
        generos = [
            "Fantas√≠a", "Ciencia Ficci√≥n", "Misterio", "Romance",
            "Terror", "Aventura", "Hist√≥rica", "Thriller", "Drama", "Comedia"
        ]
        # Agregar una clave √∫nica al selectbox para evitar el error de ID duplicado
        selected_genre = st.selectbox(
            "Selecciona el g√©nero de tu novela:",
            generos,
            index=generos.index(st.session_state.genre) if st.session_state.genre in generos else 0,
            key="selectbox_genero"
        )
        if st.session_state.genre != selected_genre:
            st.session_state.genre = selected_genre

    with st.expander("Editar Sinopsis"):
        # Agregar clave √∫nica para el text_area de la sinopsis
        sinopsis_editada = st.text_area("Sinopsis:", value=st.session_state.synopsis, height=200, key="text_area_sinopsis")
        if sinopsis_editada.strip() != st.session_state.synopsis:
            st.session_state.synopsis = sinopsis_editada.strip()

    with st.expander("Editar Audiencia"):
        # Agregar clave √∫nica para el text_area de la audiencia
        audiencia_editada = st.text_area("Audiencia (e.g., edad, intereses):", value=st.session_state.audience, height=100, key="text_area_audiencia")
        if audiencia_editada.strip() != st.session_state.audience:
            st.session_state.audience = audiencia_editada.strip()

    with st.expander("Editar Personajes Principales"):
        # Agregar clave √∫nica para el text_area de los personajes
        personajes_editados = st.text_area("Personajes principales:", value=st.session_state.elements.get('personajes', ''), height=150, key="text_area_personajes")
        st.session_state.elements['personajes'] = personajes_editados.strip()

    with st.expander("Editar Trama"):
        # Agregar clave √∫nica para el text_area de la trama
        trama_editada = st.text_area("Trama:", value=st.session_state.elements.get('trama', ''), height=150, key="text_area_trama")
        st.session_state.elements['trama'] = trama_editada.strip()

    with st.expander("Editar Ambientaci√≥n"):
        # Agregar clave √∫nica para el text_area de la ambientaci√≥n
        ambientacion_editada = st.text_area("Ambientaci√≥n:", value=st.session_state.elements.get('ambientacion', ''), height=150, key="text_area_ambientacion")
        st.session_state.elements['ambientacion'] = ambientacion_editada.strip()

    with st.expander("Editar T√©cnica Narrativa"):
        # Agregar clave √∫nica para el text_area de la t√©cnica narrativa
        tecnica_editada = st.text_area("T√©cnica narrativa:", value=st.session_state.elements.get('tecnica_narrativa', ''), height=150, key="text_area_tecnica")
        st.session_state.elements['tecnica_narrativa'] = tecnica_editada.strip()

    if st.button("Guardar Cambios", key="guardar_cambios_btn"):
        st.success("Elementos actualizados exitosamente.")


# Funci√≥n para ingresar la sinopsis
def ingresar_sinopsis():
    st.subheader("üìÑ Ingresar Sinopsis")
    sinopsis = st.text_area("Escribe una sinopsis para tu novela:", value=st.session_state.synopsis, height=200)
    if sinopsis != st.session_state.synopsis:
        st.session_state.synopsis = sinopsis.strip()
        st.success("Sinopsis actualizada exitosamente.")

# Funci√≥n para definir la audiencia
def definir_audiencia():
    st.subheader("üéØ Definir Audiencia")
    audiencia = st.text_area("Describe la audiencia objetivo para tu novela (por ejemplo, edad, intereses, g√©nero, etc.):", value=st.session_state.audience, height=100)
    if audiencia != st.session_state.audience:
        st.session_state.audience = audiencia.strip()
        st.success("Audiencia actualizada exitosamente.")

# Funci√≥n para mostrar el estado de la sesi√≥n (para depuraci√≥n)
def mostrar_estado():
    st.sidebar.markdown("## üìä Estado de la Sesi√≥n")
    st.sidebar.write("### G√©nero:")
    st.sidebar.write(st.session_state.genre)
    st.sidebar.write("### Sinopsis:")
    st.sidebar.write(st.session_state.synopsis)
    st.sidebar.write("### Audiencia:")
    st.sidebar.write(st.session_state.audience)
    st.sidebar.write("### Elementos:")
    st.sidebar.write(st.session_state.elements)
    st.sidebar.write("### Cap√≠tulos Generados:")
    st.sidebar.write(len(st.session_state.chapters))

# Interfaz de la aplicaci√≥n
st.header("üìñ Genera tu Novela")

if not st.session_state.chapters:
    # Paso 0: Seleccionar el G√©nero
    st.subheader("Paso 0: Seleccionar el G√©nero de la Novela")
    generos = [
        "Fantas√≠a", "Ciencia Ficci√≥n", "Misterio", "Romance",
        "Terror", "Aventura", "Hist√≥rica", "Thriller", "Drama", "Comedia"
    ]
    # Utilizamos una variable temporal para evitar sobrescribir en cada interacci√≥n
    selected_genre = st.selectbox(
        "Selecciona el g√©nero de tu novela:",
        generos,
        index=generos.index(st.session_state.genre) if st.session_state.genre in generos else 0
    )
    if st.session_state.genre != selected_genre:
        st.session_state.genre = selected_genre

    # Paso 1: Ingresar la Sinopsis
    ingresar_sinopsis()

    # Paso 2: Definir la Audiencia
    definir_audiencia()

    # Paso 3: Generar los Elementos de la Novela
    st.subheader("Paso 3: Generar Elementos de la Novela")
    if st.button("Generar Elementos", key="generar_elementos_btn"):
        generar_elementos()
    if st.session_state.elements:
        st.markdown("### **Elementos Generados:**")
        st.markdown(f"**G√©nero:** {st.session_state.genre}")
        st.markdown(f"**Sinopsis:** {st.session_state.synopsis}")
        st.markdown(f"**Audiencia:** {st.session_state.audience}")
        st.markdown(f"**Personajes Principales:** {st.session_state.elements.get('personajes', '')}")
        st.markdown(f"**Trama:** {st.session_state.elements.get('trama', '')}")
        st.markdown(f"**Ambientaci√≥n:** {st.session_state.elements.get('ambientacion', '')}")
        st.markdown(f"**T√©cnica Narrativa:** {st.session_state.elements.get('tecnica_narrativa', '')}")
        st.markdown("---")
        # Opci√≥n para editar los elementos
        editar_elementos()
        # Paso 4: Generar el Primer Cap√≠tulo
        st.subheader("Paso 4: Generar el Primer Cap√≠tulo")
        if st.button("Generar Primer Cap√≠tulo", key="generar_primer_capitulo_btn"):
            generar_capitulo()
        if st.session_state.chapters:
            st.markdown("### **Cap√≠tulo 1:**")
            st.write(st.session_state.chapters[0])
else:
    # Generar cap√≠tulos adicionales
    st.subheader("Generar Nuevos Cap√≠tulos")
    st.markdown("### **Cap√≠tulo Anterior:**")
    st.write(st.session_state.chapters[-1])
    st.markdown("---")
    # Usamos un formulario para manejar mejor la entrada del usuario
    with st.form(key='idea_form'):
        idea = st.text_input("Ingresa una idea para el siguiente cap√≠tulo:")
        submit_button = st.form_submit_button(label="Generar Siguiente Cap√≠tulo")
    if submit_button:
        generar_capitulo(idea=idea)
    if st.session_state.chapters:
        st.markdown(f"### **Cap√≠tulo {len(st.session_state.chapters)}:**")
        st.write(st.session_state.chapters[-1])

# Mostrar todos los cap√≠tulos generados
if st.session_state.chapters:
    st.sidebar.header("üîç Navegar por los Cap√≠tulos")
    for idx, cap in enumerate(st.session_state.chapters, 1):
        with st.sidebar.expander(f"Cap√≠tulo {idx}"):
            st.write(cap)

# Mostrar el estado de la sesi√≥n (opcional, para depuraci√≥n)
mostrar_estado()
